--task 17 : 

select c.nickname  "Hunts in the field" , c.mice_ration "ration of mice" , b.name  
from cats c join bands b 
on c.band_no = b.band_no and (c.mice_ration > 50) and ( b.site = 'FIELD' or b.site = 'WHOLE AREA' ) ;

-- task 18: 


select c.name  , c.in_herd_since   
from cats c join cats c1 
on c.nickname = c1.nickname  and c.in_herd_since < '2008-12-01'
order by in_herd_since desc ;  

--task 19: 

--Task 19. For cats with function CAT and NICE, display the names of all their chiefs in order 
--compatible of their hierarchy. Solve the task on three ways:
--a) using only joins,
--b) using a tree with CONNECT_BY_ROOT operator and pivot tables ,
--c) using the tree with CONNECT_BY_ROOT operator and 
--SYS_CONNECT_BY_PATH function.
--a)
SELECT  C1.name ,C1.function ,C2.NAME "Chief 1",C3.NAME "Chief 2",C4.NAME "Chief 3"
from Cats C1 FULL JOIN (Cats C2 FULL JOIN 
            (Cats C3 FULL JOIN Cats C4
            ON C3.CHIEF = C4.NICKNAME)
            ON C2.CHIEF = C3.NICKNAME)
            ON C1.CHIEF = C2.NICKNAME
where C1.function in( 'CAT','NICE') 
ORDER BY C4.function ASC,C2.FUNCTION ASC
;

--b)
SELECT *
FROM
(
  SELECT CONNECT_BY_ROOT name "Name", name, CONNECT_BY_ROOT function "function", LEVEL "L"
  FROM Cats
  CONNECT BY PRIOR chief = nickname
  START WITH function IN ('CAT', 'NICE') ORDER BY NAME 
)
PIVOT (
   MIN(name) FOR L IN (2 "chief 1", 3 "chief 2", 4 "chief 3")
) ;


--c)
SELECT  name, function, RTRIM(REVERSE(RTRIM(SYS_CONNECT_BY_PATH(REVERSE(name), ' | '), name)), '| ') "Name of susbsequent chiefs"
FROM Cats
WHERE function = 'CAT'
      OR function = 'NICE'
CONNECT BY PRIOR nickname = chief
START WITH chief IS NULL
;


--task 20 ) 


--name of female cats / where incident > 01.01.2007 / name of band / enmy name / degree of hostiliy / incident date 

select c.name "Name of female cat "  , b.name "band name"  , i.enemy_name "enemy name", e.hostility_degree "enemy rating", I.incdent_date "incident date" 
from cats c join incidents i on c.nickname = i.nickname 
join bands b on c.chief = b.band_chief
join enemies e on e.enemy_name = i.enemy_name
where  incdent_date> '2007-01-01' and gender = 'W'
order by c.name ASC ; 


--task 21 . Determine how many cats in each band have enemies. 

SELECT B.name "Band name", COUNT(*) "Cats with enemies" 
FROM Cats C
JOIN bands  B ON c.band_no= b.band_no
WHERE c.nickname IN (Select nickname FROM incidents)
GROUP BY B.name;

--taks 22 
SELECT c.function "Function",c.nickname "Nickname of Cat" ,COUNT(*)
FROM CATS C 
JOIN incidents I ON c.nickname = i.nickname
group by c.function, c.nickname
HAVING count(*)>1 ;


--task 23 :
SELECT C.name, (C.mice_ration + C.mice_extra) * 12 "Annual dose",'Above 864' "Dose"
FROM Cats C
WHERE C.mice_extra IS NOT NULL AND  mice_ration IS NOT NULL AND (C.mice_ration+C.mice_extra)*12 > 864
UNION

SELECT C.name, (C.mice_ration + C.mice_extra) * 12 "Annual dose",' ' "Dose"
FROM Cats C
WHERE C.mice_extra IS NOT NULL AND  mice_ration IS NOT NULL AND (C.mice_ration+C.mice_extra)*12 = 864
UNION

SELECT C.name, (C.mice_ration + C.mice_extra) * 12 "Annual dose",'Below 864' "Dose"
FROM Cats C
WHERE C.mice_extra IS NOT NULL AND  mice_ration IS NOT NULL AND (C.mice_ration+C.mice_extra)*12 < 864
ORDER BY "Annual dose" DESC ;




--Task 24.
-- Find bands that don't have members. Display their numbers, names and operating areas. Solve the problem in two ways: 
-- without subqueries and set operators and using set operators.

-- 1.) Using subqueries

SELECT B.BAND_NO ,B.NAME, B.site 
FROM bands B
LEFT JOIN CATS C
ON B.BAND_NO = C.BAND_NO
WHERE C.nickname IS NULL
;

-- 2.) Using set operators

SELECT B.BAND_NO ,B.NAME, B.site FROM bands B
MINUS
SELECT B.BAND_NO ,B.NAME, B.site FROM bands B
WHERE B.BAND_NO IN(SELECT band_no FROM CATS);


-- Task 25. 
-- Find cats whose ration of mice is not less than tripled the highest ration of cats operating in ORCHARD performing the function NICE. 
-- Do not use the MAX function.

SELECT C.name,C.function,C.mice_ration 
FROM CATS C
JOIN(SELECT Cin.mice_RATION FROM CATS Cin JOIN Bands B ON cin.band_no=B.band_no
        WHERE Cin.function ='NICE' AND b.site IN ('WHOLE AREA', 'ORCHARD') AND ROWNUM =1
        ORDER BY cin.mice_ration DESC) C21
ON C.mice_ration >= C21.mice_ration*3
ORDER BY C.mice_ration;


-- Task 26. 
-- Find the functions (apart from function BOSS) with which the highest and lowest average total ration of mice is associated. 
-- Do not use set operators (UNION, INTERSECT, MINUS).

SELECT C2.function, C2.AVG
FROM
  (SELECT MIN(AVG) "MINAVG", MAX(AVG) "MAXAVG"
  FROM (
    SELECT function, CEIL(AVG(mice_ration + NVL(mice_extra, 0))) "AVG"
    FROM Cats
    WHERE function != 'BOSS'
    GROUP BY function
  )) C1

  JOIN

  (SELECT function, CEIL(AVG(mice_ration + NVL(mice_extra, 0))) "AVG"
  FROM Cats
  WHERE function != 'BOSS'
  GROUP BY function)  C2

  ON C1.MINAVG = C2.AVG
     OR C1.MAXAVG = C2.AVG
ORDER BY C2.AVG;


-- Task 27
-- Find cats occupying the first n places in terms of the total number of mice consumed (cats with the same consumption 
-- occupy the same place!). Solve the task using the following three ways:
-- a.)	using correlated subquery,
-- b.)	using the ROWNUM pseudo-column,
-- c.)	using the join operation of Cats relation with Cats relation.

-- a.)
SELECT nickname, mice_ration + NVL(mice_extra, 0) "EATS"
FROM Cats C
WHERE (SELECT COUNT(DISTINCT mice_ration + NVL(mice_extra, 0)) FROM Cats
      WHERE mice_ration + NVL(mice_extra, 0) > C.mice_ration + NVL(C.mice_extra, 0)) < 6
ORDER BY 2 DESC;

-- b.)
SELECT nickname, mice_ration + NVL(mice_extra, 0) "EATS"
FROM Cats
WHERE mice_ration + NVL(mice_extra, 0) IN (
  SELECT *
  FROM (
    SELECT DISTINCT mice_ration + NVL(mice_extra, 0)
    FROM Cats
    ORDER BY 1 DESC
  ) WHERE ROWNUM <= 6
);

-- c.)
SELECT C1.nickname, AVG(C1.mice_ration + NVL(C1.mice_extra, 0)) "EATS"
FROM Cats C1 LEFT JOIN Cats C2
    ON C1.mice_ration + NVL(C1.mice_extra, 0) < C2.mice_ration + NVL(C2.mice_extra, 0)
GROUP BY C1.nickname
HAVING COUNT(C1.nickname) <=6
ORDER BY 2 DESC;


-- Task 29
-- For male cats, for whom the total ration of mice does not exceed the average in their band, determine the following data: 
-- name of cat, his total mice consumption, number of members of his band, average of total consumption for his band.
-- Do not use views. Solve task in three ways:
-- a.)	only with joining and without subqueries,
-- b.)	with joining and the only subquery in the FROM clause,
-- c.)	without joining and with two subqueries: one in the SELECT clause and one in the WHERE clause.

-- a.)
SELECT C1.name, MIN(C1.mice_ration + NVL(C1.mice_extra, 0)) "EATS", C1.band_no, TO_CHAR(AVG(C2.mice_ration + NVL(C2.mice_extra, 0)), '99.99') "AVERAGE IN BAND"
FROM Cats C1 JOIN Cats C2 ON c1.band_no= C2.band_no
WHERE C1.gender = 'M'
GROUP BY C1.name, C1.band_no
HAVING MIN(C1.mice_ration + NVL(C1.mice_extra, 0)) < AVG(C2.mice_ration + NVL(C2.mice_extra, 0))
order by band_no desc;

-- b.)
SELECT name, mice_ration + NVL(mice_extra, 0) "EATS", C1.band_no, TO_CHAR(AVG, '99.99') "AVERAGE IN BAND"
FROM Cats C1 JOIN (SELECT band_no, AVG(mice_ration + NVL(mice_extra, 0)) "AVG" FROM Cats GROUP BY band_no) C2
    ON C1.band_no= C2.band_no
       AND mice_ration + NVL(mice_extra, 0) < AVG
WHERE gender = 'M';

-- c.)
SELECT name, mice_ration + NVL(mice_extra, 0) "EATS", band_no,
  TO_CHAR((SELECT AVG(mice_ration + NVL(mice_extra, 0)) "AVG" 
FROM Cats K WHERE Cats.band_no = K.band_no), '99.99') "AVERAGE IN BAND"
FROM Cats
WHERE gender = 'M'
AND mice_ration + NVL(mice_extra, 0) < (SELECT AVG(mice_ration + NVL(mice_extra, 0)) "AVG" 
FROM Cats K WHERE Cats.band_no= K.band_no);
       

-- Task 31
-- For three cats of longest memberships in the herd from combined bands BLACK KNIGHTS and PINTO HUNTERS  
-- increase the allocation of mice by 10% of the minimum allocation in the entire herd or by 10 mice depending on whether the 
-- increase applies to a female cat or a male cat. Ration of extra mice for these cats (of both genders) ought to increase 
-- by 15% of the average ration extra in the cat's band. Display values before and after the increase and then roll back the changes.

DROP VIEW Statistics;

CREATE OR REPLACE VIEW Statistics(name_Band, avg_cons, MAX_CONS, MIN_CONS, CAT, CAT_WITH_EXTRA)
AS
SELECT Bands.name, AVG(mice_ration), MAX(mice_ration), MIN(mice_ration), COUNT(nickname), COUNT(mice_extra)
FROM Bands JOIN Cats ON Bands.band_no = Cats.band_no
GROUP BY Bands.name;

SELECT *
FROM Statistics;

SELECT nickname "NICKNAME", Cats.name, function, mice_ration "EATS", 'OD ' || MIN_CONS || ' DO ' || MAX_CONS "CONSUMPTION LIMITS", TO_CHAR(in_herd_since, 'YYYY-MM-DD') "HUNT FROM"
FROM (Bands JOIN Cats ON Bands.band_no = Cats.band_no JOIN Statistics  ON Bands.name = Statistics.name_Band)
WHERE nickname = '&nickname';

-- Task 32
-- 
-- Task 33
-- Write a query that will calculate the sums of total mice consumption by cats performing each function, broken down by cat's 
-- bands and genders. Summarize the rations for each function. Solve the task in two ways:
-- a.) using two (or three) SELECT queries and the DECODE function (or CASE),
-- b.) using pivot tables.

WITH Cat_Function_Band AS
(SELECT B.name "NAME", 
      CASE
      WHEN C.gender = 'M' THEN 'Male cat '
      ELSE 'Female cat'
      END "GENDER",
      COUNT(*) "HOW MANY",
      SUM(CASE WHEN C.function = 'BOSS' THEN NVL(mice_ration, 0) + NVL(mice_extra, 0) ELSE 0 END ) "BOSS",
      SUM(CASE WHEN C.function = 'THUG' THEN NVL(mice_ration, 0) + NVL(mice_extra, 0) ELSE 0 END ) "THUG",
      SUM(CASE WHEN C.function = 'CATCHING' THEN NVL(mice_ration, 0) + NVL(mice_extra, 0) ELSE 0 END ) "CATCHING",
      SUM(CASE WHEN C.function = 'CATCHER' THEN NVL(mice_ration, 0) + NVL(mice_extra, 0) ELSE 0 END ) "CATCHER",
      SUM(CASE WHEN C.function = 'CAT' THEN NVL(mice_ration, 0) + NVL(mice_extra, 0) ELSE 0 END ) "CAT",
      SUM(CASE WHEN C.function = 'NICE' THEN NVL(mice_ration, 0) + NVL(mice_extra, 0) ELSE 0 END ) "NICE",
      SUM(CASE WHEN C.function = 'DIVISIVE' THEN NVL(mice_ration, 0) + NVL(mice_extra, 0) ELSE 0 END ) "DIVISIVE",
      SUM( NVL(mice_ration, 0) + NVL(mice_extra, 0)  ) "SUM"
FROM Cats C
    JOIN Bands B ON C.band_no = B.band_no
GROUP BY B.name, C.gender
ORDER BY B.name)

SELECT name, gender, TO_CHAR("HOW MANY") "HOW MANY", "BOSS", "THUG", "CATCHING", "CATCHER", "CAT", "NICE", "DIVISIVE", "SUM"
FROM Cat_Function_Band
UNION
SELECT 'Z Eats in total' "NAME",
       ' ' "GENDER",
       ' ' "HOW MANY",
       SUM(CASE WHEN C.function = 'BOSS' THEN NVL(mice_ration, 0) + NVL(mice_extra, 0) ELSE 0 END ) "BOSS",
       SUM(CASE WHEN C.function = 'THUG' THEN NVL(mice_ration, 0) + NVL(mice_extra, 0) ELSE 0 END ) "THUG",
       SUM(CASE WHEN C.function = 'CATCHING' THEN NVL(mice_ration, 0) + NVL(mice_extra, 0) ELSE 0 END ) "CATCHING",
       SUM(CASE WHEN C.function = 'CATCHER' THEN NVL(mice_ration, 0) + NVL(mice_extra, 0) ELSE 0 END ) "CATCHER",
       SUM(CASE WHEN C.function = 'CAT' THEN NVL(mice_ration, 0) + NVL(mice_extra, 0) ELSE 0 END ) "CAT",
       SUM(CASE WHEN C.function = 'NICE' THEN NVL(mice_ration, 0) + NVL(mice_extra, 0) ELSE 0 END ) "NICE",
       SUM(CASE WHEN C.function = 'DIVISIVE' THEN NVL(mice_ration, 0) + NVL(mice_extra, 0) ELSE 0 END ) "DIVISIVE",
       SUM( NVL(mice_ration, 0) + NVL(mice_extra, 0)  ) "SUM"
FROM Cats  C ;    
